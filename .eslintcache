[{"C:\\test\\my-app\\src\\reportWebVitals.js":"1","C:\\test\\my-app\\src\\App.js":"2","C:\\test\\my-app\\src\\components\\common\\Loader\\index.js":"3","C:\\test\\my-app\\src\\router\\Router.jsx":"4","C:\\test\\my-app\\src\\fonts\\Lato.jsx":"5","C:\\test\\my-app\\src\\router\\history.js":"6","C:\\test\\my-app\\src\\containers\\Ticket\\Ticket.jsx":"7","C:\\test\\my-app\\src\\index.js":"8","C:\\test\\my-app\\src\\components\\timer\\timer.jsx":"9","C:\\test\\my-app\\src\\components\\ticketComponents\\ticketsMenu.jsx":"10","C:\\test\\my-app\\src\\components\\ticketComponents\\addGoalAndTitleForm.jsx":"11","C:\\test\\my-app\\src\\components\\ticketComponents\\messagesAndActions.jsx":"12","C:\\ticketsRepo\\src\\index.js":"13","C:\\ticketsRepo\\src\\containers\\MultipleSelect.jsx":"14"},{"size":362,"mtime":1608127917286,"results":"15","hashOfConfig":"16"},{"size":116,"mtime":1608309172584,"results":"17","hashOfConfig":"16"},{"size":60,"mtime":1608146194053,"results":"18","hashOfConfig":"16"},{"size":565,"mtime":1608147225236,"results":"19","hashOfConfig":"16"},{"size":268,"mtime":1591691708000,"results":"20","hashOfConfig":"16"},{"size":125,"mtime":1608147021532,"results":"21","hashOfConfig":"16"},{"size":7387,"mtime":1608308902959,"results":"22","hashOfConfig":"16"},{"size":457,"mtime":1608147266355,"results":"23","hashOfConfig":"16"},{"size":1075,"mtime":1608232049555,"results":"24","hashOfConfig":"16"},{"size":3198,"mtime":1608251863901,"results":"25","hashOfConfig":"16"},{"size":5806,"mtime":1608252846075,"results":"26","hashOfConfig":"16"},{"size":7347,"mtime":1608309175317,"results":"27","hashOfConfig":"16"},{"size":472,"mtime":1608423673859,"results":"28","hashOfConfig":"29"},{"size":4838,"mtime":1608423673850,"results":"30","hashOfConfig":"29"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1cd0p5i",{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1h5ryav",{"filePath":"62","messages":"63","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\test\\my-app\\src\\reportWebVitals.js",[],"C:\\test\\my-app\\src\\App.js",[],"C:\\test\\my-app\\src\\components\\common\\Loader\\index.js",[],"C:\\test\\my-app\\src\\router\\Router.jsx",[],"C:\\test\\my-app\\src\\fonts\\Lato.jsx",[],"C:\\test\\my-app\\src\\router\\history.js",[],"C:\\test\\my-app\\src\\containers\\Ticket\\Ticket.jsx",["64","65","66","67","68"],"import React, { useEffect, useState, Fragment } from \"react\";\r\nimport { Badge, Grid } from \"@material-ui/core\";\r\n\r\nimport { makeStyles, createStyles, withStyles } from \"@material-ui/core/styles\";\r\n\r\nimport * as Yup from \"yup\";\r\nimport { TicketsMenu } from \"../../components/ticketComponents/ticketsMenu\";\r\nimport { AddGoalAndTitleForm } from \"../../components/ticketComponents/addGoalAndTitleForm\";\r\nimport { MessagesAndActions } from \"../../components/ticketComponents/messagesAndActions\";\r\n\r\nconst useStyles = makeStyles(theme =>\r\n  createStyles({\r\n    root: {\r\n      flexGrow: 1\r\n    },\r\n\r\n    container: {\r\n      height: \"100vh\"\r\n    }\r\n  })\r\n);\r\n\r\nexport const EnhancedBadge = withStyles(theme => ({\r\n  anchorOriginBottomRightRectangle: {\r\n    backgroundColor: props => props.backgroundColor,\r\n    right: 10,\r\n    bottom: 4,\r\n    padding: 5,\r\n    borderRadius: 8\r\n  }\r\n}))(Badge);\r\n\r\n\r\nconst listOFTickets = [\r\n  {\r\n    ticket: {\r\n      id: 1111,\r\n      title: \"New Task\",\r\n      assigne: \"Abdallah Rizeq\",\r\n      status: \"New\",\r\n      Goal: \"Buy a product\"\r\n    }\r\n  },\r\n  {\r\n    ticket: {\r\n      id: 2222,\r\n      title: \"New Task2\",\r\n      assigne: \"Abdallah Rizeq\",\r\n      status: \"New\",\r\n      Goal: \"Buy a product\"\r\n    }\r\n  },\r\n  {\r\n    ticket: {\r\n      id: 3331,\r\n      title: \"New Task3\",\r\n      assigne: \"Abdallah Rizeq\",\r\n      status: \"New\",\r\n      Goal: \"Buy a product\"\r\n    }\r\n  },\r\n  {\r\n    ticket: {\r\n      id: 3533,\r\n      title: \"New Task4\",\r\n      assigne: \"Abdallah Rizeq\",\r\n      status: \"New\",\r\n      Goal: \"Buy a product\"\r\n    }\r\n  },\r\n  {\r\n    ticket: {\r\n      id: 3333,\r\n      title: \"New Task5\",\r\n      assigne: \"Abdallah Rizeq\",\r\n      status: \"New\",\r\n      Goal: \"Buy a product\"\r\n    }\r\n  },\r\n  {\r\n    ticket: {\r\n      id: 3334,\r\n      title: \"New Task6\",\r\n      assigne: \"Abdallah Rizeq\",\r\n      status: \"New\",\r\n      Goal: \"Buy a product\"\r\n    }\r\n  }\r\n];\r\n\r\nconst Ticket = () => {\r\n  const classes = useStyles();\r\n\r\n  const [tickets, setTickets] = useState(listOFTickets);\r\n  const [second, setSecond] = useState(\"00\");\r\n  const [minute, setMinute] = useState(\"00\");\r\n  const [isActive, setIsActive] = useState(false);\r\n  const [counter, setCounter] = useState(0);\r\n  const [shouldDisableMessageText, setShouldDisableMessageText] = useState(true);\r\n  const [messages, setMessages] = useState([]);\r\n\r\n  const array_move = (arr, old_index, new_index) => {\r\n    if (new_index >= arr.length) {\r\n      var k = new_index - arr.length + 1;\r\n      while (k--) {\r\n        arr.push(undefined);\r\n      }\r\n    }\r\n    arr.splice(new_index, 0, arr.splice(old_index, 1)[0]);\r\n    return arr;\r\n  };\r\n\r\n  const handleChangeTicketStatusToSnoozed = () => {\r\n    setIsActive(false);\r\n    setCounter(0);\r\n    setSecond(\"00\");\r\n    setMinute(\"00\");\r\n    const ticketsArray = tickets;\r\n    ticketsArray.length > 0 &&\r\n      ticketsArray.map((ticketObj, index) => {\r\n        if (ticketObj.ticket.id === selectedTicket.ticket.id) {\r\n          ticketObj.ticket.status = \"Snoozed\";\r\n          setTickets(array_move(ticketsArray, index, ticketsArray.length - 1));\r\n        }\r\n      });\r\n  };\r\n\r\n  const [selectedTicket, setSelectedTicket] = useState(tickets[0]);\r\n  const [selectedTicketMessages, setSelectedTicketMessages] = useState(tickets[0]);\r\n\r\n  const [isLoadingMessages, setIsLoadingMessages] = useState(false);\r\n  const handleSetSelectedTiket = ticket => {\r\n    setSelectedTicket(ticket);\r\n  };\r\n\r\n  const initialValues = {\r\n    goal: 0,\r\n    taskName: \"\"\r\n  };\r\n  const validationSchema = Yup.object().shape({\r\n    goal: Yup.string().required(\"Required\"),\r\n    taskName: Yup.string()\r\n      .required(\"Required\")\r\n      .min(0, \"Negative Number\")\r\n      .max(25, \"Should be less than 25 character\")\r\n  });\r\n\r\n  const handleSumbit = () => {\r\n    setIsActive(true);\r\n    setShouldDisableMessageText(false);\r\n  };\r\n\r\n  const getBadgeColor = status => {\r\n    switch (status) {\r\n      case \"New\":\r\n        return \"#3DBED2\";\r\n      case \"Has_New_Message\":\r\n        return \"#E06868\";\r\n      case \"Snoozed\":\r\n        return \"#FEC573\";\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  const handleSendMessage = value => {\r\n    setMessages([\r\n      ...messages,\r\n      {\r\n        value: value,\r\n        time: new Date(Date.now()).toString(),\r\n        tickedId: selectedTicket.ticket.id\r\n      }\r\n    ]);\r\n    setSelectedTicketMessages([\r\n      ...selectedTicketMessages,\r\n      {\r\n        value: value,\r\n        time: new Date(Date.now()).toString(),\r\n        tickedId: selectedTicket.ticket.id\r\n      }\r\n    ]);\r\n\r\n    const ticketsArray = tickets;\r\n    const newTickets =\r\n      ticketsArray.length > 0 &&\r\n      ticketsArray.map(ticketObj => {\r\n        if (ticketObj.ticket.id === selectedTicket.ticket.id) {\r\n          ticketObj.ticket.status = \"Has_New_Message\";\r\n          return ticketObj;\r\n        }\r\n        return ticketObj;\r\n      });\r\n    setTickets(newTickets);\r\n  };\r\n\r\n  const deleteTicket = () => {\r\n    const ticketsArray = tickets;\r\n    const newTickets =\r\n      ticketsArray.length > 0 &&\r\n      ticketsArray.filter(ticketObj => {\r\n        if (ticketObj.ticket.id === selectedTicket.ticket.id) {\r\n          ticketObj.ticket.status = \"Closed\";\r\n          return;\r\n        }\r\n        return ticketObj;\r\n      });\r\n\r\n    setSelectedTicket(newTickets[0]);\r\n    setTickets(newTickets);\r\n  };\r\n\r\n  useEffect(() => {\r\n    setIsLoadingMessages(true);\r\n    const selectedTicketMessages =\r\n      messages &&\r\n      messages.length > 0 &&\r\n      messages.filter(message => {\r\n        if (message.tickedId === selectedTicket.ticket.id) {\r\n          return message;\r\n        }\r\n      });\r\n\r\n    setIsActive(false);\r\n    setCounter(0);\r\n    setSecond(\"00\");\r\n    setMinute(\"00\");\r\n    setTimeout(() => {\r\n      if (selectedTicketMessages && selectedTicketMessages.length > 0) {\r\n        setSelectedTicketMessages(selectedTicketMessages);\r\n      } else {\r\n        setSelectedTicketMessages([]);\r\n      }\r\n      setIsLoadingMessages(false);\r\n    }, 1000);\r\n  }, [selectedTicket]);\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Grid container className={classes.container}>\r\n        <Grid item xs={1}>\r\n          <TicketsMenu\r\n            tickets={tickets}\r\n            getBadgeColor={getBadgeColor}\r\n            selectedTicket={selectedTicket}\r\n            handleSetSelectedTiket={handleSetSelectedTiket}\r\n          />\r\n        </Grid>\r\n        <Grid item xs={4}>\r\n          <AddGoalAndTitleForm\r\n            initialValues={initialValues}\r\n            handleSumbit={handleSumbit}\r\n            validationSchema={validationSchema}\r\n          />\r\n        </Grid>\r\n        <Grid item xs={7}>\r\n          <MessagesAndActions\r\n            selectedTicket={selectedTicket}\r\n            setSecond={setSecond}\r\n            setMinute={setMinute}\r\n            setIsActive={setIsActive}\r\n            setCounter={setCounter}\r\n            counter={counter}\r\n            isActive={isActive}\r\n            minute={minute}\r\n            second={second}\r\n            handleChangeTicketStatusToSnoozed={handleChangeTicketStatusToSnoozed}\r\n            deleteTicket={deleteTicket}\r\n            messages={selectedTicketMessages}\r\n            shouldDisableMessageText={shouldDisableMessageText}\r\n            handleSendMessage={handleSendMessage}\r\n            isLoadingMessages={isLoadingMessages}\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Ticket;\r\n","C:\\test\\my-app\\src\\index.js",[],["69","70"],"C:\\test\\my-app\\src\\components\\timer\\timer.jsx",["71","72","73"],"import React, { useState, useEffect } from \"react\";\r\n\r\nconst Timer = props => {\r\n  const {\r\n    setMinute,\r\n    setSecond,\r\n    setIsActive,\r\n    setCounter,\r\n    minute,\r\n    second,\r\n    isActive,\r\n    counter\r\n  } = props;\r\n\r\n  useEffect(() => {\r\n    let intervalId;\r\n\r\n    if (isActive) {\r\n      intervalId = setInterval(() => {\r\n        const secondCounter = counter % 60;\r\n        const minuteCounter = Math.floor(counter / 60);\r\n\r\n        let computedSecond =\r\n          String(secondCounter).length === 1 ? `0${secondCounter}` : secondCounter;\r\n        let computedMinute =\r\n          String(minuteCounter).length === 1 ? `0${minuteCounter}` : minuteCounter;\r\n\r\n        setSecond(computedSecond);\r\n        setMinute(computedMinute);\r\n\r\n        setCounter(counter => counter + 1);\r\n      }, 1000);\r\n    }\r\n\r\n    return () => clearInterval(intervalId);\r\n  }, [isActive, counter]);\r\n\r\n\r\n  return (\r\n    <div>\r\n      <div>\r\n        <span>{minute}</span>\r\n        <span>:</span>\r\n        <span>{second}</span>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Timer;\r\n","C:\\test\\my-app\\src\\components\\ticketComponents\\ticketsMenu.jsx",["74","75","76"],"import React, { useEffect, useState, Fragment } from \"react\";\r\nimport { Avatar, Badge } from \"@material-ui/core\";\r\nimport { makeStyles, createStyles, Theme, withStyles } from \"@material-ui/core/styles\";\r\n\r\nconst useStyles = makeStyles(theme =>\r\n  createStyles({\r\n    root: {\r\n      flexGrow: 1\r\n    },\r\n    sideMenu: {\r\n      backgroundColor: \"white\",\r\n      height: \"100%\",\r\n      border: \"4px solid #88A8CB\",\r\n      display: \"flex\",\r\n      flexDirection: \"column\",\r\n      alignItems: \"center\"\r\n    },\r\n\r\n    avatar: {\r\n      padding: 6,\r\n      cursor: \"pointer\"\r\n    },\r\n    avatarWithMargin: {\r\n      padding: 6,\r\n      cursor: \"pointer\",\r\n      margin: 15,\r\n      border: \"3px solid #7F8C8D  !important\"\r\n    },\r\n    userAvatar: {\r\n      padding: 6,\r\n      width: 50,\r\n      height: 50,\r\n      \"& > img\": {\r\n        borderRadius: 50\r\n      }\r\n    },\r\n    badge: {\r\n      margin: 15\r\n    },\r\n    bottomRightBadge: {\r\n      right: 10,\r\n      bottom: 4,\r\n      padding: 5,\r\n      borderRadius: 8\r\n    },\r\n\r\n    userBadge: {\r\n      margin: 15\r\n    }\r\n  })\r\n);\r\n\r\nexport const EnhancedBadge = withStyles(theme => ({\r\n  anchorOriginBottomRightRectangle: {\r\n    backgroundColor: props => props.backgroundColor,\r\n    right: 10,\r\n    bottom: 4,\r\n    padding: 5,\r\n    borderRadius: 8\r\n  }\r\n}))(Badge);\r\n\r\nexport const TicketsMenu = props => {\r\n  const { tickets, getBadgeColor, selectedTicket, handleSetSelectedTiket } = props;\r\n  const classes = useStyles();\r\n  return (\r\n    <div className={classes.sideMenu}>\r\n      <Badge\r\n        anchorOrigin={{\r\n          vertical: \"bottom\",\r\n          horizontal: \"right\"\r\n        }}\r\n        variant=\"dot\"\r\n        className={classes.userBadge}\r\n        classes={{\r\n          anchorOriginBottomRightRectangle: classes.bottomRightBadge\r\n        }}\r\n      >\r\n        <Avatar\r\n          className={classes.userAvatar}\r\n          src={\"https://upload.wikimedia.org/wikipedia/commons/a/a0/Pierre-Person.jpg\"}\r\n        />\r\n      </Badge>\r\n      {tickets.length > 0 &&\r\n        tickets.map((ticketObj, index) => {\r\n          const backgroundColor = getBadgeColor(ticketObj.ticket.status);\r\n          return (\r\n            <Fragment key={ticketObj.ticket.id}>\r\n              {selectedTicket.ticket.id === ticketObj.ticket.id ? (\r\n                <Avatar\r\n                  onClick={() => handleSetSelectedTiket(ticketObj)}\r\n                  className={classes.avatarWithMargin}\r\n                >\r\n                  {\"T\" + (index + 1)}\r\n                </Avatar>\r\n              ) : (\r\n                <EnhancedBadge\r\n                  anchorOrigin={{\r\n                    vertical: \"bottom\",\r\n                    horizontal: \"right\"\r\n                  }}\r\n                  variant=\"dot\"\r\n                  className={classes.badge}\r\n                  backgroundColor={backgroundColor}\r\n                >\r\n                  <Avatar\r\n                    onClick={() => handleSetSelectedTiket(ticketObj)}\r\n                    className={classes.avatar}\r\n                  >\r\n                    {\"T\" + (index + 1)}\r\n                  </Avatar>\r\n                </EnhancedBadge>\r\n              )}\r\n            </Fragment>\r\n          );\r\n        })}\r\n    </div>\r\n  );\r\n};\r\n","C:\\test\\my-app\\src\\components\\ticketComponents\\addGoalAndTitleForm.jsx",["77"],"import React from \"react\";\r\nimport { Typography, TextField, Button } from \"@material-ui/core\";\r\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\r\nimport { makeStyles, createStyles } from \"@material-ui/core/styles\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport FormHelperText from \"@material-ui/core/FormHelperText\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport { Formik, Form } from \"formik\";\r\n\r\nconst useStyles = makeStyles(theme =>\r\n  createStyles({\r\n    root: {\r\n      flexGrow: 1\r\n    },\r\n    controlPaper: {\r\n      backgroundColor: \"#F7F7F7\",\r\n      height: \"100%\",\r\n      position: \"relative\"\r\n    },\r\n    inputsWrapper: {\r\n      padding: \"25px 53px\"\r\n    },\r\n    classifyHeader: {\r\n      color: \"#3DBED2\",\r\n      borderBottom: \"3px solid #3DBED2\",\r\n      width: 78,\r\n      fontSize: 20,\r\n      fontWeight: \"bold\"\r\n    },\r\n    whatIsUserSelect: {\r\n      margin: \"23px 0px\"\r\n    },\r\n    whatIsUserQ: {\r\n      opacity: 0.6\r\n    },\r\n    selectWrapper: {\r\n      display: \"flex\",\r\n      margin: \"10px 0\",\r\n      flexDirection: \"column\"\r\n    },\r\n    taskNameWrapper: {\r\n      margin: \"15px 0\"\r\n    },\r\n    textfieldHeader: {\r\n      opacity: 0.6\r\n    },\r\n    TextField: {\r\n      margin: \"5px 0\",\r\n      width: \"70%\",\r\n      border:\"1px solid #D0D0D0\",\r\n      borderRadius: 5,\r\n      \"& > div\": {\r\n        \"& > fieldset\": {\r\n            border: 0\r\n        }\r\n      }\r\n    },\r\n    textfieldInfo: {\r\n      opacity: 0.6,\r\n      fontSize: 14\r\n    },\r\n    proceedButton: {\r\n      position: \"absolute\",\r\n      bottom: 21,\r\n      right: 30,\r\n      color: \"white\",\r\n      backgroundColor: \" #3DBED2\",\r\n      \"&:hover\": {\r\n        backgroundColor: \"rgb(61, 190, 210, 0.5)\"\r\n      }\r\n    },\r\n    input: {\r\n      padding: 10,\r\n      width: \"100%\"\r\n    },\r\n    formControl: {\r\n        maxWidth: 140\r\n      },\r\n  })\r\n);\r\n\r\nexport const AddGoalAndTitleForm = props => {\r\n  const classes = useStyles();\r\n\r\n  const { initialValues, handleSumbit, validationSchema } = props;\r\n  return (\r\n    <Formik\r\n      initialValues={initialValues}\r\n      onSubmit={handleSumbit}\r\n      validationSchema={validationSchema}\r\n    >\r\n      {({ values, handleChange, errors }) => {\r\n        return (\r\n          <Form style={{ height: \"100%\" }}>\r\n            <div className={classes.controlPaper}>\r\n              <div className={classes.inputsWrapper}>\r\n                <div>\r\n                  <Typography className={classes.classifyHeader}>Classify</Typography>\r\n                </div>\r\n                <div className={classes.whatIsUserSelect}>\r\n                  <Typography className={classes.whatIsUserQ}>\r\n                    Whats is the user asking for?{\" \"}\r\n                  </Typography>\r\n                  <div className={classes.selectWrapper}>\r\n                    <FormControl className={classes.formControl}>\r\n                      <Select\r\n                        value={values[\"goal\"]}\r\n                        name={\"goal\"}\r\n                        onChange={handleChange}\r\n                        disableUnderline\r\n                        IconComponent={ExpandMoreIcon}\r\n                        MenuProps={{\r\n                          anchorReference: \"anchorEl\",\r\n                          transformOrigin: { vertical: \"top\", horizontal: \"left\" }\r\n                        }}\r\n                        onChange={handleChange(\"goal\")}\r\n                      >\r\n                        <MenuItem className={classes.select} value={0}>\r\n                          Buy a Product\r\n                        </MenuItem>\r\n                        <MenuItem lassName={classes.select} value={1}>\r\n                          Cancel an account\r\n                        </MenuItem>\r\n                        <MenuItem lassName={classes.select} value={1}>\r\n                          Buy and recommend a gift\r\n                        </MenuItem>\r\n                        <MenuItem lassName={classes.select} value={2}>\r\n                          Ask For Business\r\n                        </MenuItem>\r\n                      </Select>\r\n                    </FormControl>\r\n                    {errors.goal && (\r\n                      <FormHelperText error={true}>{errors.goal}</FormHelperText>\r\n                    )}\r\n                  </div>\r\n                  <div className={classes.taskNameWrapper}>\r\n                    <Typography className={classes.textfieldHeader}>\r\n                      Please type the task name\r\n                    </Typography>\r\n                    <TextField\r\n                      className={classes.TextField}\r\n                      id=\"outlined-basic\"\r\n                      placeholder=\"Buy what?\"\r\n                      variant=\"outlined\"\r\n                      value={values[\"taskName\"]}\r\n                      name=\"taskName\"\r\n                      onChange={handleChange(\"taskName\")}\r\n                      max={25}\r\n                      inputProps={{ className: classes.input }}\r\n                    />\r\n                    {errors.taskName ? (\r\n                      <FormHelperText error={true}>{errors.taskName}</FormHelperText>\r\n                    ) : (\r\n                      <Typography className={classes.textfieldInfo}>\r\n                        (Characters left: {25 - values[\"taskName\"].length})\r\n                      </Typography>\r\n                    )}\r\n                  </div>\r\n                  <Button\r\n                    disabled={!values.taskName || !!errors.taskName || !!errors.goal}\r\n                    type=\"submit\"\r\n                    className={classes.proceedButton}\r\n                  >\r\n                    Proceed\r\n                  </Button>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </Form>\r\n        );\r\n      }}\r\n    </Formik>\r\n  );\r\n};\r\n","C:\\test\\my-app\\src\\components\\ticketComponents\\messagesAndActions.jsx",[],"C:\\ticketsRepo\\src\\index.js",[],"C:\\ticketsRepo\\src\\containers\\MultipleSelect.jsx",["78"],{"ruleId":"79","severity":1,"message":"80","line":1,"column":38,"nodeType":"81","messageId":"82","endLine":1,"endColumn":46},{"ruleId":"83","severity":1,"message":"84","line":120,"column":43,"nodeType":"85","messageId":"86","endLine":120,"endColumn":45},{"ruleId":"83","severity":1,"message":"87","line":204,"column":11,"nodeType":"88","messageId":"89","endLine":204,"endColumn":18},{"ruleId":"83","severity":1,"message":"90","line":218,"column":31,"nodeType":"85","messageId":"91","endLine":218,"endColumn":33},{"ruleId":"92","severity":1,"message":"93","line":236,"column":6,"nodeType":"94","endLine":236,"endColumn":22,"suggestions":"95"},{"ruleId":"96","replacedBy":"97"},{"ruleId":"98","replacedBy":"99"},{"ruleId":"79","severity":1,"message":"100","line":1,"column":17,"nodeType":"81","messageId":"82","endLine":1,"endColumn":25},{"ruleId":"79","severity":1,"message":"101","line":7,"column":5,"nodeType":"81","messageId":"82","endLine":7,"endColumn":16},{"ruleId":"92","severity":1,"message":"102","line":36,"column":6,"nodeType":"94","endLine":36,"endColumn":25,"suggestions":"103"},{"ruleId":"79","severity":1,"message":"104","line":1,"column":17,"nodeType":"81","messageId":"82","endLine":1,"endColumn":26},{"ruleId":"79","severity":1,"message":"100","line":1,"column":28,"nodeType":"81","messageId":"82","endLine":1,"endColumn":36},{"ruleId":"79","severity":1,"message":"105","line":3,"column":36,"nodeType":"81","messageId":"82","endLine":3,"endColumn":41},{"ruleId":"106","severity":1,"message":"107","line":117,"column":25,"nodeType":"108","endLine":117,"endColumn":56},{"ruleId":"109","severity":1,"message":"110","line":46,"column":5,"nodeType":"111","messageId":"112","endLine":46,"endColumn":10},"no-unused-vars","'Fragment' is defined but never used.","Identifier","unusedVar","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","Array.prototype.filter() expects a return value from arrow function.","ReturnStatement","expectedReturnValue","Array.prototype.filter() expects a value to be returned at the end of arrow function.","expectedAtEnd","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'messages'. Either include it or remove the dependency array.","ArrayExpression",["113"],"no-native-reassign",["114"],"no-negated-in-lhs",["115"],"'useState' is defined but never used.","'setIsActive' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'setCounter', 'setMinute', and 'setSecond'. Either include them or remove the dependency array.",["116"],"'useEffect' is defined but never used.","'Theme' is defined but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","no-dupe-keys","Duplicate key 'input'.","ObjectExpression","unexpected",{"desc":"117","fix":"118"},"no-global-assign","no-unsafe-negation",{"desc":"119","fix":"120"},"Update the dependencies array to be: [messages, selectedTicket]",{"range":"121","text":"122"},"Update the dependencies array to be: [isActive, counter, setSecond, setMinute, setCounter]",{"range":"123","text":"124"},[5972,5988],"[messages, selectedTicket]",[865,884],"[isActive, counter, setSecond, setMinute, setCounter]"]